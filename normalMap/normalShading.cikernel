//
//  normalShading.cikernel
//  normalMap
//
//  Created by Tony on 2025/4/16.
//

kernel vec4 shadingKernel(
    sampler normalMap,
    sampler originalImage,
    vec3 lightDirection)
{
    vec2 dc = destCoord();
    
    // 从 normalMap 中读取数据，将其从 [0,1] 转换到 [-1,1]
    vec3 normal = (sample(normalMap, dc).rgb * 2.0) - 1.0;
    normal = normalize(normal);
    
    // 从 originalImage 中获取原始颜色
    vec3 originalColor = sample(originalImage, dc).rgb;
    
    // 假定视角为 (0,0,1)
    vec3 viewDir = vec3(0.0, 0.0, 1.0);
    
    // 漫反射
    float diffuse = max(dot(normal, lightDirection), 0.0);
    
    // 镜面反射：计算反射向量和强度
    vec3 reflectDir = reflect(-lightDirection, normal);
    float specular = pow(max(dot(reflectDir, viewDir), 0.0), 16.0);
    
    vec3 litColor = originalColor * diffuse + specular;
    
    return vec4(litColor, 1.0);
}

